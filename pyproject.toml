[project]
name = "claude-bridge"
version = "0.1.0"
description = "Multi-Interface Session Bridge for Claude Code"
authors = [
    {name = "Claude Bridge Team", email = "dev@claude-bridge.com"}
]
readme = "README.md"
requires-python = ">=3.12"
keywords = ["claude", "discord", "bridge", "development", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Version Control"
]

dependencies = [
    "discord.py>=2.0.0",
    "pexpect>=4.8.0",
    "asyncio-mqtt>=0.13.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "aiofiles>=23.0.0",
    "rich>=13.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.8.0",
    "vulture>=2.7.0",
    "safety>=3.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0"
]

[project.urls]
Homepage = "https://github.com/claude-bridge/claude-bridge"
Documentation = "https://claude-bridge.readthedocs.io"
Repository = "https://github.com/claude-bridge/claude-bridge.git"
Issues = "https://github.com/claude-bridge/claude-bridge/issues"

[project.scripts]
claude-bridge = "claude_bridge.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.black]
target-version = ['py312']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pexpect.*",
    "asyncio_mqtt.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.vulture]
min_confidence = 60
paths = ["src", "tests"]
exclude = ["migrations/"]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[dependency-groups]
dev = [
    "psutil>=6.1.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
]
